/**
 * Stream API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v122.3.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { BanRequest, BlockUsersRequest, BlockUsersResponse, CastPollVoteRequest, ChannelGetOrCreateRequest, ChannelStateResponse, CheckExternalStorageResponse, CheckPushRequest, CheckPushResponse, CheckSNSRequest, CheckSNSResponse, CheckSQSRequest, CheckSQSResponse, CreateBlockListRequest, CreateCallRequest, CreateCallResponse, CreateChannelTypeRequest, CreateChannelTypeResponse, CreateCommandRequest, CreateCommandResponse, CreateDeviceRequest, CreateExternalStorageRequest, CreateExternalStorageResponse, CreateGuestRequest, CreateGuestResponse, CreateImportRequest, CreateImportResponse, CreateImportURLRequest, CreateImportURLResponse, CreatePollOptionRequest, CreatePollRequest, CreateRoleRequest, CreateRoleResponse, DeactivateUserRequest, DeactivateUserResponse, DeactivateUsersRequest, DeactivateUsersResponse, DeleteChannelResponse, DeleteChannelsRequest, DeleteChannelsResponse, DeleteCommandResponse, DeleteExternalStorageResponse, DeleteMessageResponse, DeleteUsersRequest, DeleteUsersResponse, EventResponse, ExportChannelsRequest, ExportChannelsResponse, ExportUserResponse, ExportUsersRequest, ExportUsersResponse, FileDeleteResponse, FileUploadResponse, FlagRequest, FlagResponse, GetApplicationResponse, GetBlockListResponse, GetBlockedUsersResponse, GetCallTokenRequest, GetCallTokenResponse, GetCommandResponse, GetCustomPermissionResponse, GetExportChannelsStatusResponse, GetImportResponse, GetManyMessagesResponse, GetMessageResponse, GetOGResponse, GetRateLimitsResponse, GetReactionsResponse, GetRepliesResponse, GetTaskResponse, GetThreadResponse, HideChannelRequest, HideChannelResponse, ImageSize, ImageUploadResponse, ListBlockListResponse, ListChannelTypesResponse, ListCommandsResponse, ListDevicesResponse, ListExternalStorageResponse, ListImportsResponse, ListPermissionsResponse, ListPushProvidersResponse, ListRolesResponse, MarkChannelsReadRequest, MarkReadRequest, MarkReadResponse, MarkUnreadRequest, MembersResponse, MessageActionRequest, MessageResponse, MuteChannelRequest, MuteChannelResponse, MuteUserRequest, MuteUserResponse, OnlyUserID, PollOptionResponse, PollResponse, PollVoteResponse, PollVotesResponse, QueryBannedUsersRequest, QueryBannedUsersResponse, QueryChannelsRequest, QueryChannelsResponse, QueryMembersRequest, QueryMessageFlagsRequest, QueryMessageFlagsResponse, QueryMessageHistoryRequest, QueryMessageHistoryResponse, QueryPollVotesRequest, QueryPollsRequest, QueryPollsResponse, QueryReactionsRequest, QueryReactionsResponse, QueryThreadsRequest, QueryThreadsResponse, QueryUsersPayload, QueryUsersResponse, ReactionRemovalResponse, ReactivateUserRequest, ReactivateUserResponse, ReactivateUsersRequest, ReactivateUsersResponse, Response, RestoreUsersRequest, SearchRequest, SearchResponse, SendEventRequest, SendMessageRequest, SendMessageResponse, SendReactionRequest, SendReactionResponse, SendUserCustomEventRequest, ShowChannelRequest, ShowChannelResponse, SortParam, TranslateMessageRequest, TruncateChannelRequest, TruncateChannelResponse, UnblockUsersRequest, UnblockUsersResponse, UnmuteChannelRequest, UnmuteResponse, UnmuteUserRequest, UnreadCountsBatchRequest, UnreadCountsBatchResponse, UpdateAppRequest, UpdateBlockListRequest, UpdateChannelPartialRequest, UpdateChannelPartialResponse, UpdateChannelRequest, UpdateChannelResponse, UpdateChannelTypeRequest, UpdateChannelTypeResponse, UpdateCommandRequest, UpdateCommandResponse, UpdateExternalStorageRequest, UpdateExternalStorageResponse, UpdateMessagePartialRequest, UpdateMessagePartialResponse, UpdateMessageRequest, UpdateMessageResponse, UpdatePollOptionRequest, UpdatePollPartialRequest, UpdatePollRequest, UpdateThreadPartialRequest, UpdateThreadPartialResponse, UpdateUsersPartialRequest, UpdateUsersRequest, UpdateUsersResponse, UpsertPushProviderRequest, UpsertPushProviderResponse, WrappedUnreadCountsResponse } from '../models';
export interface BanOperationRequest {
    banRequest: BanRequest | null;
}
export interface BlockUsersOperationRequest {
    blockUsersRequest: BlockUsersRequest | null;
}
export interface CastPollVoteOperationRequest {
    messageId: string;
    pollId: string;
    castPollVoteRequest: CastPollVoteRequest | null;
}
export interface CheckExternalStorageRequest {
    name: string;
}
export interface CheckPushOperationRequest {
    checkPushRequest: CheckPushRequest | null;
}
export interface CheckSNSOperationRequest {
    checkSNSRequest: CheckSNSRequest | null;
}
export interface CheckSQSOperationRequest {
    checkSQSRequest: CheckSQSRequest | null;
}
export interface CommitMessageRequest {
    id: string;
}
export interface CreateBlockListOperationRequest {
    createBlockListRequest: CreateBlockListRequest | null;
}
export interface CreateCallOperationRequest {
    type: string;
    id: string;
    createCallRequest: CreateCallRequest | null;
}
export interface CreateChannelTypeOperationRequest {
    createChannelTypeRequest: CreateChannelTypeRequest | null;
}
export interface CreateCommandOperationRequest {
    createCommandRequest: CreateCommandRequest | null;
}
export interface CreateDeviceOperationRequest {
    createDeviceRequest: CreateDeviceRequest | null;
}
export interface CreateExternalStorageOperationRequest {
    createExternalStorageRequest: CreateExternalStorageRequest | null;
}
export interface CreateGuestOperationRequest {
    createGuestRequest: CreateGuestRequest | null;
}
export interface CreateImportOperationRequest {
    createImportRequest: CreateImportRequest | null;
}
export interface CreateImportURLOperationRequest {
    createImportURLRequest: CreateImportURLRequest | null;
}
export interface CreatePollOperationRequest {
    createPollRequest: CreatePollRequest | null;
}
export interface CreatePollOptionOperationRequest {
    pollId: string;
    createPollOptionRequest: CreatePollOptionRequest | null;
}
export interface CreateRoleOperationRequest {
    createRoleRequest: CreateRoleRequest | null;
}
export interface DeactivateUserOperationRequest {
    userId: string;
    deactivateUserRequest: DeactivateUserRequest | null;
}
export interface DeactivateUsersOperationRequest {
    deactivateUsersRequest: DeactivateUsersRequest | null;
}
export interface DeleteBlockListRequest {
    name: string;
}
export interface DeleteChannelRequest {
    type: string;
    id: string;
    hardDelete?: boolean;
}
export interface DeleteChannelTypeRequest {
    name: string;
}
export interface DeleteChannelsOperationRequest {
    deleteChannelsRequest: DeleteChannelsRequest | null;
}
export interface DeleteCommandRequest {
    name: string;
}
export interface DeleteDeviceRequest {
    id: string;
    userId?: string;
}
export interface DeleteExternalStorageRequest {
    name: string;
}
export interface DeleteFileRequest {
    type: string;
    id: string;
    url?: string;
}
export interface DeleteImageRequest {
    type: string;
    id: string;
    url?: string;
}
export interface DeleteMessageRequest {
    id: string;
    hard?: boolean;
    deletedBy?: string;
}
export interface DeletePollRequest {
    pollId: string;
    userId?: string;
}
export interface DeletePollOptionRequest {
    pollId: string;
    optionId: string;
    userId?: string;
}
export interface DeletePushProviderRequest {
    type: DeletePushProviderTypeEnum;
    name: string;
}
export interface DeleteReactionRequest {
    id: string;
    type: string;
    userId?: string;
}
export interface DeleteRoleRequest {
    name: string;
}
export interface DeleteUsersOperationRequest {
    deleteUsersRequest: DeleteUsersRequest | null;
}
export interface ExportChannelsOperationRequest {
    exportChannelsRequest: ExportChannelsRequest | null;
}
export interface ExportUserRequest {
    userId: string;
}
export interface ExportUsersOperationRequest {
    exportUsersRequest: ExportUsersRequest | null;
}
export interface FlagOperationRequest {
    flagRequest: FlagRequest | null;
}
export interface GetBlockListRequest {
    name: string;
}
export interface GetBlockedUsersRequest {
    userId?: string;
}
export interface GetCallTokenOperationRequest {
    getCallTokenRequest: GetCallTokenRequest | null;
}
export interface GetCallToken0Request {
    callId: string;
    getCallTokenRequest: GetCallTokenRequest | null;
}
export interface GetChannelTypeRequest {
    name: string;
}
export interface GetCommandRequest {
    name: string;
}
export interface GetExportChannelsStatusRequest {
    id: string;
}
export interface GetImportRequest {
    id: string;
}
export interface GetManyMessagesRequest {
    type: string;
    id: string;
    ids: Array<string>;
}
export interface GetMessageRequest {
    id: string;
    showDeletedMessage?: boolean;
}
export interface GetOGRequest {
    url: string;
}
export interface GetOrCreateChannelRequest {
    type: string;
    id: string;
    channelGetOrCreateRequest: ChannelGetOrCreateRequest | null;
}
export interface GetOrCreateDistinctChannelRequest {
    type: string;
    channelGetOrCreateRequest: ChannelGetOrCreateRequest | null;
}
export interface GetPermissionRequest {
    id: string;
}
export interface GetPollRequest {
    pollId: string;
    userId?: string;
}
export interface GetPollOptionRequest {
    pollId: string;
    optionId: string;
    userId?: string;
}
export interface GetRateLimitsRequest {
    serverSide?: boolean;
    android?: boolean;
    ios?: boolean;
    web?: boolean;
    endpoints?: string;
}
export interface GetReactionsRequest {
    id: string;
    limit?: number;
    offset?: number;
}
export interface GetRepliesRequest {
    parentId: string;
    sort?: Array<SortParam>;
    limit?: number;
    offset?: number;
    idGte?: string;
    idGt?: string;
    idLte?: string;
    idLt?: string;
    createdAtAfterOrEqual?: string;
    createdAtAfter?: string;
    createdAtBeforeOrEqual?: string;
    createdAtBefore?: string;
    idAround?: string;
    createdAtAround?: string;
}
export interface GetTaskRequest {
    id: string;
}
export interface GetThreadRequest {
    messageId: string;
    connectionId?: string;
    replyLimit?: number;
    participantLimit?: number;
    memberLimit?: number;
}
export interface HideChannelOperationRequest {
    type: string;
    id: string;
    hideChannelRequest: HideChannelRequest | null;
}
export interface ListDevicesRequest {
    userId?: string;
}
export interface MarkChannelsReadOperationRequest {
    markChannelsReadRequest: MarkChannelsReadRequest | null;
}
export interface MarkReadOperationRequest {
    type: string;
    id: string;
    markReadRequest: MarkReadRequest | null;
}
export interface MarkUnreadOperationRequest {
    type: string;
    id: string;
    markUnreadRequest: MarkUnreadRequest | null;
}
export interface MuteChannelOperationRequest {
    muteChannelRequest: MuteChannelRequest | null;
}
export interface MuteUserOperationRequest {
    muteUserRequest: MuteUserRequest | null;
}
export interface QueryBannedUsersOperationRequest {
    payload?: QueryBannedUsersRequest;
}
export interface QueryChannelsOperationRequest {
    queryChannelsRequest: QueryChannelsRequest | null;
}
export interface QueryMembersOperationRequest {
    payload?: QueryMembersRequest;
}
export interface QueryMessageFlagsOperationRequest {
    payload?: QueryMessageFlagsRequest;
}
export interface QueryMessageHistoryOperationRequest {
    queryMessageHistoryRequest: QueryMessageHistoryRequest | null;
}
export interface QueryPollVotesOperationRequest {
    pollId: string;
    queryPollVotesRequest: QueryPollVotesRequest | null;
    userId?: string;
}
export interface QueryPollsOperationRequest {
    queryPollsRequest: QueryPollsRequest | null;
    userId?: string;
}
export interface QueryReactionsOperationRequest {
    id: string;
    queryReactionsRequest: QueryReactionsRequest;
}
export interface QueryThreadsOperationRequest {
    queryThreadsRequest: QueryThreadsRequest | null;
}
export interface QueryUsersRequest {
    payload?: QueryUsersPayload;
}
export interface ReactivateUserOperationRequest {
    userId: string;
    reactivateUserRequest: ReactivateUserRequest | null;
}
export interface ReactivateUsersOperationRequest {
    reactivateUsersRequest: ReactivateUsersRequest | null;
}
export interface RemovePollVoteRequest {
    messageId: string;
    pollId: string;
    voteId: string;
    userId?: string;
}
export interface RestoreUsersOperationRequest {
    restoreUsersRequest: RestoreUsersRequest | null;
}
export interface RunMessageActionRequest {
    id: string;
    messageActionRequest: MessageActionRequest | null;
}
export interface SearchOperationRequest {
    payload?: SearchRequest;
}
export interface SendEventOperationRequest {
    type: string;
    id: string;
    sendEventRequest: SendEventRequest | null;
}
export interface SendMessageOperationRequest {
    type: string;
    id: string;
    sendMessageRequest: SendMessageRequest | null;
}
export interface SendReactionOperationRequest {
    id: string;
    sendReactionRequest: SendReactionRequest | null;
}
export interface SendUserCustomEventOperationRequest {
    userId: string;
    sendUserCustomEventRequest: SendUserCustomEventRequest | null;
}
export interface ShowChannelOperationRequest {
    type: string;
    id: string;
    showChannelRequest: ShowChannelRequest | null;
}
export interface TranslateMessageOperationRequest {
    id: string;
    translateMessageRequest: TranslateMessageRequest | null;
}
export interface TruncateChannelOperationRequest {
    type: string;
    id: string;
    truncateChannelRequest: TruncateChannelRequest | null;
}
export interface UnbanRequest {
    targetUserId: string;
    channelCid?: string;
    createdBy?: string;
}
export interface UnblockUsersOperationRequest {
    unblockUsersRequest: UnblockUsersRequest | null;
}
export interface UndeleteMessageRequest {
    id: string;
    updateMessageRequest: UpdateMessageRequest | null;
}
export interface UnmuteChannelOperationRequest {
    unmuteChannelRequest: UnmuteChannelRequest | null;
}
export interface UnmuteUserOperationRequest {
    unmuteUserRequest: UnmuteUserRequest | null;
}
export interface UnreadCountsBatchOperationRequest {
    unreadCountsBatchRequest: UnreadCountsBatchRequest | null;
}
export interface UpdateAppOperationRequest {
    updateAppRequest: UpdateAppRequest | null;
}
export interface UpdateBlockListOperationRequest {
    name: string;
    updateBlockListRequest: UpdateBlockListRequest | null;
}
export interface UpdateChannelOperationRequest {
    type: string;
    id: string;
    updateChannelRequest: UpdateChannelRequest | null;
}
export interface UpdateChannelPartialOperationRequest {
    type: string;
    id: string;
    updateChannelPartialRequest: UpdateChannelPartialRequest | null;
}
export interface UpdateChannelTypeOperationRequest {
    name: string;
    updateChannelTypeRequest: UpdateChannelTypeRequest | null;
}
export interface UpdateCommandOperationRequest {
    name: string;
    updateCommandRequest: UpdateCommandRequest | null;
}
export interface UpdateExternalStorageOperationRequest {
    name: string;
    updateExternalStorageRequest: UpdateExternalStorageRequest | null;
}
export interface UpdateMessageOperationRequest {
    id: string;
    updateMessageRequest: UpdateMessageRequest | null;
}
export interface UpdateMessagePartialOperationRequest {
    id: string;
    updateMessagePartialRequest: UpdateMessagePartialRequest | null;
}
export interface UpdatePollOperationRequest {
    updatePollRequest: UpdatePollRequest | null;
}
export interface UpdatePollOptionOperationRequest {
    pollId: string;
    updatePollOptionRequest: UpdatePollOptionRequest | null;
}
export interface UpdatePollPartialOperationRequest {
    pollId: string;
    updatePollPartialRequest: UpdatePollPartialRequest | null;
}
export interface UpdateThreadPartialOperationRequest {
    messageId: string;
    updateThreadPartialRequest: UpdateThreadPartialRequest | null;
}
export interface UpdateUsersOperationRequest {
    updateUsersRequest: UpdateUsersRequest | null;
}
export interface UpdateUsersPartialOperationRequest {
    updateUsersPartialRequest: UpdateUsersPartialRequest | null;
}
export interface UploadFileRequest {
    type: string;
    id: string;
    file?: string;
    user?: OnlyUserID;
}
export interface UploadImageRequest {
    type: string;
    id: string;
    file?: string;
    uploadSizes?: Array<ImageSize>;
    user?: OnlyUserID;
}
export interface UpsertPushProviderOperationRequest {
    upsertPushProviderRequest: UpsertPushProviderRequest | null;
}
/**
 *
 */
export declare class ProductchatApi extends runtime.BaseAPI {
    /**
     * Restricts user activity either in specific channel or globally  Sends events: - user.banned  Required permissions: - BanChannelMember - BanUser
     * Ban user
     */
    banRaw(requestParameters: BanOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Response>>;
    /**
     * Restricts user activity either in specific channel or globally  Sends events: - user.banned  Required permissions: - BanChannelMember - BanUser
     * Ban user
     */
    ban(requestParameters: BanOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Response>;
    /**
     * Block users
     * Block user
     */
    blockUsersRaw(requestParameters: BlockUsersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BlockUsersResponse>>;
    /**
     * Block users
     * Block user
     */
    blockUsers(requestParameters: BlockUsersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BlockUsersResponse>;
    /**
     * Cast a vote on a poll  Sends events: - poll.vote_casted  Required permissions: - CastVote
     * Cast vote
     */
    castPollVoteRaw(requestParameters: CastPollVoteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PollVoteResponse>>;
    /**
     * Cast a vote on a poll  Sends events: - poll.vote_casted  Required permissions: - CastVote
     * Cast vote
     */
    castPollVote(requestParameters: CastPollVoteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PollVoteResponse>;
    /**
     *
     * Check External Storage
     */
    checkExternalStorageRaw(requestParameters: CheckExternalStorageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CheckExternalStorageResponse>>;
    /**
     *
     * Check External Storage
     */
    checkExternalStorage(requestParameters: CheckExternalStorageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CheckExternalStorageResponse>;
    /**
     * Sends a test message via push, this is a test endpoint to verify your push settings
     * Check push
     */
    checkPushRaw(requestParameters: CheckPushOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CheckPushResponse>>;
    /**
     * Sends a test message via push, this is a test endpoint to verify your push settings
     * Check push
     */
    checkPush(requestParameters: CheckPushOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CheckPushResponse>;
    /**
     * Validates Amazon SNS configuration
     * Check SNS
     */
    checkSNSRaw(requestParameters: CheckSNSOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CheckSNSResponse>>;
    /**
     * Validates Amazon SNS configuration
     * Check SNS
     */
    checkSNS(requestParameters: CheckSNSOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CheckSNSResponse>;
    /**
     * Validates Amazon SQS credentials
     * Check SQS
     */
    checkSQSRaw(requestParameters: CheckSQSOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CheckSQSResponse>>;
    /**
     * Validates Amazon SQS credentials
     * Check SQS
     */
    checkSQS(requestParameters: CheckSQSOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CheckSQSResponse>;
    /**
     * Commits a pending message, which will make it visible in the channel  Sends events: - message.new - message.updated
     * Commit message
     */
    commitMessageRaw(requestParameters: CommitMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MessageResponse>>;
    /**
     * Commits a pending message, which will make it visible in the channel  Sends events: - message.new - message.updated
     * Commit message
     */
    commitMessage(requestParameters: CommitMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MessageResponse>;
    /**
     * Creates a new application blocklist, once created the blocklist can be used by any channel type
     * Create block list
     */
    createBlockListRaw(requestParameters: CreateBlockListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Response>>;
    /**
     * Creates a new application blocklist, once created the blocklist can be used by any channel type
     * Create block list
     */
    createBlockList(requestParameters: CreateBlockListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Response>;
    /**
     * Creates a call  Required permissions: - CreateCall - ReadChannel
     * Create a call
     */
    createCallRaw(requestParameters: CreateCallOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateCallResponse>>;
    /**
     * Creates a call  Required permissions: - CreateCall - ReadChannel
     * Create a call
     */
    createCall(requestParameters: CreateCallOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateCallResponse>;
    /**
     * Creates new channel type
     * Create channel type
     */
    createChannelTypeRaw(requestParameters: CreateChannelTypeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateChannelTypeResponse>>;
    /**
     * Creates new channel type
     * Create channel type
     */
    createChannelType(requestParameters: CreateChannelTypeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateChannelTypeResponse>;
    /**
     * Creates custom chat command
     * Create command
     */
    createCommandRaw(requestParameters: CreateCommandOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateCommandResponse>>;
    /**
     * Creates custom chat command
     * Create command
     */
    createCommand(requestParameters: CreateCommandOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateCommandResponse>;
    /**
     * Adds a new device to a user, if the same device already exists the call will have no effect
     * Create device
     */
    createDeviceRaw(requestParameters: CreateDeviceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Response>>;
    /**
     * Adds a new device to a user, if the same device already exists the call will have no effect
     * Create device
     */
    createDevice(requestParameters: CreateDeviceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Response>;
    /**
     * Creates new external storage
     * Create external storage
     */
    createExternalStorageRaw(requestParameters: CreateExternalStorageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateExternalStorageResponse>>;
    /**
     * Creates new external storage
     * Create external storage
     */
    createExternalStorage(requestParameters: CreateExternalStorageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateExternalStorageResponse>;
    /**
     *
     * Create Guest
     */
    createGuestRaw(requestParameters: CreateGuestOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateGuestResponse>>;
    /**
     *
     * Create Guest
     */
    createGuest(requestParameters: CreateGuestOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateGuestResponse>;
    /**
     * Creates a new import
     * Create import
     */
    createImportRaw(requestParameters: CreateImportOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateImportResponse>>;
    /**
     * Creates a new import
     * Create import
     */
    createImport(requestParameters: CreateImportOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateImportResponse>;
    /**
     * Creates a new import URL
     * Create import URL
     */
    createImportURLRaw(requestParameters: CreateImportURLOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateImportURLResponse>>;
    /**
     * Creates a new import URL
     * Create import URL
     */
    createImportURL(requestParameters: CreateImportURLOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateImportURLResponse>;
    /**
     * Creates a new poll  Required permissions: - CreatePoll
     * Create poll
     */
    createPollRaw(requestParameters: CreatePollOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PollResponse>>;
    /**
     * Creates a new poll  Required permissions: - CreatePoll
     * Create poll
     */
    createPoll(requestParameters: CreatePollOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PollResponse>;
    /**
     * Creates a poll option  Sends events: - poll.updated  Required permissions: - CastVote - UpdatePoll
     * Create poll option
     */
    createPollOptionRaw(requestParameters: CreatePollOptionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PollOptionResponse>>;
    /**
     * Creates a poll option  Sends events: - poll.updated  Required permissions: - CastVote - UpdatePoll
     * Create poll option
     */
    createPollOption(requestParameters: CreatePollOptionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PollOptionResponse>;
    /**
     * Creates custom role
     * Create role
     */
    createRoleRaw(requestParameters: CreateRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateRoleResponse>>;
    /**
     * Creates custom role
     * Create role
     */
    createRole(requestParameters: CreateRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateRoleResponse>;
    /**
     * Deactivates user with possibility to activate it back  Sends events: - user.deactivated
     * Deactivate user
     */
    deactivateUserRaw(requestParameters: DeactivateUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeactivateUserResponse>>;
    /**
     * Deactivates user with possibility to activate it back  Sends events: - user.deactivated
     * Deactivate user
     */
    deactivateUser(requestParameters: DeactivateUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeactivateUserResponse>;
    /**
     * Deactivate users in batches  Sends events: - user.deactivated
     * Deactivate users
     */
    deactivateUsersRaw(requestParameters: DeactivateUsersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeactivateUsersResponse>>;
    /**
     * Deactivate users in batches  Sends events: - user.deactivated
     * Deactivate users
     */
    deactivateUsers(requestParameters: DeactivateUsersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeactivateUsersResponse>;
    /**
     * Deletes previously created application blocklist
     * Delete block list
     */
    deleteBlockListRaw(requestParameters: DeleteBlockListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Response>>;
    /**
     * Deletes previously created application blocklist
     * Delete block list
     */
    deleteBlockList(requestParameters: DeleteBlockListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Response>;
    /**
     * Deletes channel  Sends events: - channel.deleted  Required permissions: - DeleteChannel
     * Delete channel
     */
    deleteChannelRaw(requestParameters: DeleteChannelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteChannelResponse>>;
    /**
     * Deletes channel  Sends events: - channel.deleted  Required permissions: - DeleteChannel
     * Delete channel
     */
    deleteChannel(requestParameters: DeleteChannelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteChannelResponse>;
    /**
     * Deletes channel type
     * Delete channel type
     */
    deleteChannelTypeRaw(requestParameters: DeleteChannelTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Response>>;
    /**
     * Deletes channel type
     * Delete channel type
     */
    deleteChannelType(requestParameters: DeleteChannelTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Response>;
    /**
     * Allows to delete several channels at once asynchronously  Sends events: - channel.deleted  Required permissions: - DeleteChannel
     * Deletes channels asynchronously
     */
    deleteChannelsRaw(requestParameters: DeleteChannelsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteChannelsResponse>>;
    /**
     * Allows to delete several channels at once asynchronously  Sends events: - channel.deleted  Required permissions: - DeleteChannel
     * Deletes channels asynchronously
     */
    deleteChannels(requestParameters: DeleteChannelsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteChannelsResponse>;
    /**
     * Deletes custom chat command
     * Delete command
     */
    deleteCommandRaw(requestParameters: DeleteCommandRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteCommandResponse>>;
    /**
     * Deletes custom chat command
     * Delete command
     */
    deleteCommand(requestParameters: DeleteCommandRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteCommandResponse>;
    /**
     * Deletes one device
     * Delete device
     */
    deleteDeviceRaw(requestParameters: DeleteDeviceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Response>>;
    /**
     * Deletes one device
     * Delete device
     */
    deleteDevice(requestParameters: DeleteDeviceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Response>;
    /**
     * Deletes external storage
     * Delete external storage
     */
    deleteExternalStorageRaw(requestParameters: DeleteExternalStorageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteExternalStorageResponse>>;
    /**
     * Deletes external storage
     * Delete external storage
     */
    deleteExternalStorage(requestParameters: DeleteExternalStorageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteExternalStorageResponse>;
    /**
     * Deletes previously uploaded file  Required permissions: - DeleteAttachment
     * Delete file
     */
    deleteFileRaw(requestParameters: DeleteFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileDeleteResponse>>;
    /**
     * Deletes previously uploaded file  Required permissions: - DeleteAttachment
     * Delete file
     */
    deleteFile(requestParameters: DeleteFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileDeleteResponse>;
    /**
     * Deletes previously uploaded image  Required permissions: - DeleteAttachment
     * Delete image
     */
    deleteImageRaw(requestParameters: DeleteImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileDeleteResponse>>;
    /**
     * Deletes previously uploaded image  Required permissions: - DeleteAttachment
     * Delete image
     */
    deleteImage(requestParameters: DeleteImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileDeleteResponse>;
    /**
     * Deletes message  Sends events: - message.deleted  Required permissions: - DeleteMessage
     * Delete message
     */
    deleteMessageRaw(requestParameters: DeleteMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteMessageResponse>>;
    /**
     * Deletes message  Sends events: - message.deleted  Required permissions: - DeleteMessage
     * Delete message
     */
    deleteMessage(requestParameters: DeleteMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteMessageResponse>;
    /**
     * Deletes a poll  Sends events: - poll.deleted  Required permissions: - DeletePoll
     * Delete poll
     */
    deletePollRaw(requestParameters: DeletePollRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Response>>;
    /**
     * Deletes a poll  Sends events: - poll.deleted  Required permissions: - DeletePoll
     * Delete poll
     */
    deletePoll(requestParameters: DeletePollRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Response>;
    /**
     * Deletes a poll option  Sends events: - poll.updated  Required permissions: - UpdatePoll
     * Delete poll option
     */
    deletePollOptionRaw(requestParameters: DeletePollOptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Response>>;
    /**
     * Deletes a poll option  Sends events: - poll.updated  Required permissions: - UpdatePoll
     * Delete poll option
     */
    deletePollOption(requestParameters: DeletePollOptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Response>;
    /**
     * Delete a push provider from v2 with multi bundle/package support. v1 isn\'t supported in this endpoint
     * Delete a push provider
     */
    deletePushProviderRaw(requestParameters: DeletePushProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Response>>;
    /**
     * Delete a push provider from v2 with multi bundle/package support. v1 isn\'t supported in this endpoint
     * Delete a push provider
     */
    deletePushProvider(requestParameters: DeletePushProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Response>;
    /**
     * Removes user reaction from the message  Sends events: - reaction.deleted  Required permissions: - DeleteReaction
     * Delete reaction
     */
    deleteReactionRaw(requestParameters: DeleteReactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReactionRemovalResponse>>;
    /**
     * Removes user reaction from the message  Sends events: - reaction.deleted  Required permissions: - DeleteReaction
     * Delete reaction
     */
    deleteReaction(requestParameters: DeleteReactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReactionRemovalResponse>;
    /**
     * Deletes custom role
     * Delete role
     */
    deleteRoleRaw(requestParameters: DeleteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Response>>;
    /**
     * Deletes custom role
     * Delete role
     */
    deleteRole(requestParameters: DeleteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Response>;
    /**
     * Deletes users and optionally all their belongings asynchronously.  Sends events: - channel.deleted - user.deleted
     * Delete Users
     */
    deleteUsersRaw(requestParameters: DeleteUsersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteUsersResponse>>;
    /**
     * Deletes users and optionally all their belongings asynchronously.  Sends events: - channel.deleted - user.deleted
     * Delete Users
     */
    deleteUsers(requestParameters: DeleteUsersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteUsersResponse>;
    /**
     * Exports channel data to JSON file
     * Export channels
     */
    exportChannelsRaw(requestParameters: ExportChannelsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExportChannelsResponse>>;
    /**
     * Exports channel data to JSON file
     * Export channels
     */
    exportChannels(requestParameters: ExportChannelsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExportChannelsResponse>;
    /**
     * Exports the user\'s profile, reactions and messages. Raises an error if a user has more than 10k messages or reactions
     * Export user
     */
    exportUserRaw(requestParameters: ExportUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExportUserResponse>>;
    /**
     * Exports the user\'s profile, reactions and messages. Raises an error if a user has more than 10k messages or reactions
     * Export user
     */
    exportUser(requestParameters: ExportUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExportUserResponse>;
    /**
     * Exports user profile, reactions and messages for list of given users
     * Export users
     */
    exportUsersRaw(requestParameters: ExportUsersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExportUsersResponse>>;
    /**
     * Exports user profile, reactions and messages for list of given users
     * Export users
     */
    exportUsers(requestParameters: ExportUsersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExportUsersResponse>;
    /**
     * Reports message or user for review by moderators  Sends events: - message.flagged - user.flagged  Required permissions: - FlagMessage - FlagUser
     * Flag
     */
    flagRaw(requestParameters: FlagOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FlagResponse>>;
    /**
     * Reports message or user for review by moderators  Sends events: - message.flagged - user.flagged  Required permissions: - FlagMessage - FlagUser
     * Flag
     */
    flag(requestParameters: FlagOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FlagResponse>;
    /**
     * This Method returns the application settings
     * Get App Settings
     */
    getAppRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetApplicationResponse>>;
    /**
     * This Method returns the application settings
     * Get App Settings
     */
    getApp(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetApplicationResponse>;
    /**
     * Returns block list by given name
     * Get block list
     */
    getBlockListRaw(requestParameters: GetBlockListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetBlockListResponse>>;
    /**
     * Returns block list by given name
     * Get block list
     */
    getBlockList(requestParameters: GetBlockListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetBlockListResponse>;
    /**
     * Get list of blocked Users
     * Get list of blocked Users
     */
    getBlockedUsersRaw(requestParameters: GetBlockedUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetBlockedUsersResponse>>;
    /**
     * Get list of blocked Users
     * Get list of blocked Users
     */
    getBlockedUsers(requestParameters?: GetBlockedUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetBlockedUsersResponse>;
    /**
     * Retrieves the token to join a call  Required permissions: - JoinCall - ReadChannel
     * Get Call Token
     */
    getCallTokenRaw(requestParameters: GetCallTokenOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCallTokenResponse>>;
    /**
     * Retrieves the token to join a call  Required permissions: - JoinCall - ReadChannel
     * Get Call Token
     */
    getCallToken(requestParameters: GetCallTokenOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCallTokenResponse>;
    /**
     * Retrieves the token to join a call  Required permissions: - JoinCall - ReadChannel
     * Get Call Token
     */
    getCallToken_1Raw(requestParameters: GetCallToken0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCallTokenResponse>>;
    /**
     * Retrieves the token to join a call  Required permissions: - JoinCall - ReadChannel
     * Get Call Token
     */
    getCallToken_1(requestParameters: GetCallToken0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCallTokenResponse>;
    /**
     * Gets channel type
     * Get channel type
     */
    getChannelTypeRaw(requestParameters: GetChannelTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Response>>;
    /**
     * Gets channel type
     * Get channel type
     */
    getChannelType(requestParameters: GetChannelTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Response>;
    /**
     * Returns custom command by its name
     * Get command
     */
    getCommandRaw(requestParameters: GetCommandRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCommandResponse>>;
    /**
     * Returns custom command by its name
     * Get command
     */
    getCommand(requestParameters: GetCommandRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCommandResponse>;
    /**
     *
     * Export channels status
     */
    getExportChannelsStatusRaw(requestParameters: GetExportChannelsStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetExportChannelsStatusResponse>>;
    /**
     *
     * Export channels status
     */
    getExportChannelsStatus(requestParameters: GetExportChannelsStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetExportChannelsStatusResponse>;
    /**
     * Gets an import
     * Get import
     */
    getImportRaw(requestParameters: GetImportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetImportResponse>>;
    /**
     * Gets an import
     * Get import
     */
    getImport(requestParameters: GetImportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetImportResponse>;
    /**
     * Returns list messages found by IDs  Required permissions: - ReadChannel
     * Get many messages
     */
    getManyMessagesRaw(requestParameters: GetManyMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetManyMessagesResponse>>;
    /**
     * Returns list messages found by IDs  Required permissions: - ReadChannel
     * Get many messages
     */
    getManyMessages(requestParameters: GetManyMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetManyMessagesResponse>;
    /**
     * Returns message by ID  Required permissions: - ReadChannel
     * Get message
     */
    getMessageRaw(requestParameters: GetMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetMessageResponse>>;
    /**
     * Returns message by ID  Required permissions: - ReadChannel
     * Get message
     */
    getMessage(requestParameters: GetMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetMessageResponse>;
    /**
     * Get an OpenGraph attachment for a link
     * Get OG
     */
    getOGRaw(requestParameters: GetOGRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetOGResponse>>;
    /**
     * Get an OpenGraph attachment for a link
     * Get OG
     */
    getOG(requestParameters: GetOGRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetOGResponse>;
    /**
     * This Method creates a channel or returns an existing one with matching attributes  Sends events: - channel.created - member.added - member.removed - member.updated - user.watching.start
     * Get or create channel
     */
    getOrCreateChannelRaw(requestParameters: GetOrCreateChannelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelStateResponse>>;
    /**
     * This Method creates a channel or returns an existing one with matching attributes  Sends events: - channel.created - member.added - member.removed - member.updated - user.watching.start
     * Get or create channel
     */
    getOrCreateChannel(requestParameters: GetOrCreateChannelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelStateResponse>;
    /**
     * This Method creates a channel or returns an existing one with matching attributes  Sends events: - channel.created - member.added - member.removed - member.updated - user.watching.start
     * Get or create channel
     */
    getOrCreateDistinctChannelRaw(requestParameters: GetOrCreateDistinctChannelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelStateResponse>>;
    /**
     * This Method creates a channel or returns an existing one with matching attributes  Sends events: - channel.created - member.added - member.removed - member.updated - user.watching.start
     * Get or create channel
     */
    getOrCreateDistinctChannel(requestParameters: GetOrCreateDistinctChannelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelStateResponse>;
    /**
     * Gets custom permission
     * Get permission
     */
    getPermissionRaw(requestParameters: GetPermissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCustomPermissionResponse>>;
    /**
     * Gets custom permission
     * Get permission
     */
    getPermission(requestParameters: GetPermissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCustomPermissionResponse>;
    /**
     * Retrieves a poll
     * Get poll
     */
    getPollRaw(requestParameters: GetPollRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PollResponse>>;
    /**
     * Retrieves a poll
     * Get poll
     */
    getPoll(requestParameters: GetPollRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PollResponse>;
    /**
     * Retrieves a poll option
     * Get poll option
     */
    getPollOptionRaw(requestParameters: GetPollOptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PollOptionResponse>>;
    /**
     * Retrieves a poll option
     * Get poll option
     */
    getPollOption(requestParameters: GetPollOptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PollOptionResponse>;
    /**
     * Get rate limits usage and quotas
     * Get rate limits
     */
    getRateLimitsRaw(requestParameters: GetRateLimitsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetRateLimitsResponse>>;
    /**
     * Get rate limits usage and quotas
     * Get rate limits
     */
    getRateLimits(requestParameters?: GetRateLimitsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetRateLimitsResponse>;
    /**
     * Returns list of reactions of specific message  Required permissions: - ReadChannel
     * Get reactions
     */
    getReactionsRaw(requestParameters: GetReactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetReactionsResponse>>;
    /**
     * Returns list of reactions of specific message  Required permissions: - ReadChannel
     * Get reactions
     */
    getReactions(requestParameters: GetReactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetReactionsResponse>;
    /**
     * Returns replies (thread) of the message  Required permissions: - ReadChannel
     * Get replies
     */
    getRepliesRaw(requestParameters: GetRepliesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetRepliesResponse>>;
    /**
     * Returns replies (thread) of the message  Required permissions: - ReadChannel
     * Get replies
     */
    getReplies(requestParameters: GetRepliesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetRepliesResponse>;
    /**
     * Gets status of a task
     * Get status of a task
     */
    getTaskRaw(requestParameters: GetTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetTaskResponse>>;
    /**
     * Gets status of a task
     * Get status of a task
     */
    getTask(requestParameters: GetTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetTaskResponse>;
    /**
     * Return a specific thread  Required permissions: - ReadChannel
     * Get Thread
     */
    getThreadRaw(requestParameters: GetThreadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetThreadResponse>>;
    /**
     * Return a specific thread  Required permissions: - ReadChannel
     * Get Thread
     */
    getThread(requestParameters: GetThreadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetThreadResponse>;
    /**
     * Marks channel as hidden for current user  Sends events: - channel.hidden  Required permissions: - ReadChannel
     * Hide channel
     */
    hideChannelRaw(requestParameters: HideChannelOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HideChannelResponse>>;
    /**
     * Marks channel as hidden for current user  Sends events: - channel.hidden  Required permissions: - ReadChannel
     * Hide channel
     */
    hideChannel(requestParameters: HideChannelOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HideChannelResponse>;
    /**
     * Returns all available block lists
     * List block lists
     */
    listBlockListsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListBlockListResponse>>;
    /**
     * Returns all available block lists
     * List block lists
     */
    listBlockLists(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListBlockListResponse>;
    /**
     * Lists all available channel types
     * List channel types
     */
    listChannelTypesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListChannelTypesResponse>>;
    /**
     * Lists all available channel types
     * List channel types
     */
    listChannelTypes(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListChannelTypesResponse>;
    /**
     * Returns all custom commands
     * List commands
     */
    listCommandsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListCommandsResponse>>;
    /**
     * Returns all custom commands
     * List commands
     */
    listCommands(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListCommandsResponse>;
    /**
     * Returns all available devices
     * List devices
     */
    listDevicesRaw(requestParameters: ListDevicesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListDevicesResponse>>;
    /**
     * Returns all available devices
     * List devices
     */
    listDevices(requestParameters?: ListDevicesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListDevicesResponse>;
    /**
     * Lists external storage
     * List external storage
     */
    listExternalStorageRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListExternalStorageResponse>>;
    /**
     * Lists external storage
     * List external storage
     */
    listExternalStorage(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListExternalStorageResponse>;
    /**
     * Gets an import
     * Get import
     */
    listImportsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListImportsResponse>>;
    /**
     * Gets an import
     * Get import
     */
    listImports(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListImportsResponse>;
    /**
     * Lists all available permissions
     * List permissions
     */
    listPermissionsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListPermissionsResponse>>;
    /**
     * Lists all available permissions
     * List permissions
     */
    listPermissions(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListPermissionsResponse>;
    /**
     * List details of all push providers.
     * List push providers
     */
    listPushProvidersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListPushProvidersResponse>>;
    /**
     * List details of all push providers.
     * List push providers
     */
    listPushProviders(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListPushProvidersResponse>;
    /**
     * Lists all available roles
     * List roles
     */
    listRolesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListRolesResponse>>;
    /**
     * Lists all available roles
     * List roles
     */
    listRoles(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListRolesResponse>;
    /**
     * Marks channels as read up to the specific message. If no channels is given, mark all channel as read  Sends events: - message.read  Required permissions: - ReadChannel
     * Mark channels as read
     */
    markChannelsReadRaw(requestParameters: MarkChannelsReadOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MarkReadResponse>>;
    /**
     * Marks channels as read up to the specific message. If no channels is given, mark all channel as read  Sends events: - message.read  Required permissions: - ReadChannel
     * Mark channels as read
     */
    markChannelsRead(requestParameters: MarkChannelsReadOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MarkReadResponse>;
    /**
     * Marks channel as read up to the specific message  Sends events: - message.read  Required permissions: - ReadChannel
     * Mark read
     */
    markReadRaw(requestParameters: MarkReadOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MarkReadResponse>>;
    /**
     * Marks channel as read up to the specific message  Sends events: - message.read  Required permissions: - ReadChannel
     * Mark read
     */
    markRead(requestParameters: MarkReadOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MarkReadResponse>;
    /**
     * Marks channel as unread from a specific message  Required permissions: - ReadChannel
     * Mark unread
     */
    markUnreadRaw(requestParameters: MarkUnreadOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Response>>;
    /**
     * Marks channel as unread from a specific message  Required permissions: - ReadChannel
     * Mark unread
     */
    markUnread(requestParameters: MarkUnreadOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Response>;
    /**
     * Mutes channel for user  Sends events: - channel.muted  Required permissions: - MuteChannel
     * Mute channel
     */
    muteChannelRaw(requestParameters: MuteChannelOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MuteChannelResponse>>;
    /**
     * Mutes channel for user  Sends events: - channel.muted  Required permissions: - MuteChannel
     * Mute channel
     */
    muteChannel(requestParameters: MuteChannelOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MuteChannelResponse>;
    /**
     * Mutes one or several users  Sends events: - user.muted  Required permissions: - MuteUser
     * Mute user
     */
    muteUserRaw(requestParameters: MuteUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MuteUserResponse>>;
    /**
     * Mutes one or several users  Sends events: - user.muted  Required permissions: - MuteUser
     * Mute user
     */
    muteUser(requestParameters: MuteUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MuteUserResponse>;
    /**
     * Find and filter channel scoped or global user bans  Required permissions: - ReadChannel
     * Query Banned Users
     */
    queryBannedUsersRaw(requestParameters: QueryBannedUsersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QueryBannedUsersResponse>>;
    /**
     * Find and filter channel scoped or global user bans  Required permissions: - ReadChannel
     * Query Banned Users
     */
    queryBannedUsers(requestParameters?: QueryBannedUsersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QueryBannedUsersResponse>;
    /**
     * Query channels with filter query  Required permissions: - ReadChannel
     * Query channels
     */
    queryChannelsRaw(requestParameters: QueryChannelsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QueryChannelsResponse>>;
    /**
     * Query channels with filter query  Required permissions: - ReadChannel
     * Query channels
     */
    queryChannels(requestParameters: QueryChannelsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QueryChannelsResponse>;
    /**
     * Find and filter channel members  Required permissions: - ReadChannel
     * Query members
     */
    queryMembersRaw(requestParameters: QueryMembersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MembersResponse>>;
    /**
     * Find and filter channel members  Required permissions: - ReadChannel
     * Query members
     */
    queryMembers(requestParameters?: QueryMembersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MembersResponse>;
    /**
     * Find and filter message flags  Required permissions: - ReadMessageFlags
     * Query Message Flags
     */
    queryMessageFlagsRaw(requestParameters: QueryMessageFlagsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QueryMessageFlagsResponse>>;
    /**
     * Find and filter message flags  Required permissions: - ReadMessageFlags
     * Query Message Flags
     */
    queryMessageFlags(requestParameters?: QueryMessageFlagsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QueryMessageFlagsResponse>;
    /**
     * Queries history for one message
     * Query message history
     */
    queryMessageHistoryRaw(requestParameters: QueryMessageHistoryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QueryMessageHistoryResponse>>;
    /**
     * Queries history for one message
     * Query message history
     */
    queryMessageHistory(requestParameters: QueryMessageHistoryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QueryMessageHistoryResponse>;
    /**
     * Queries votes
     * Query votes
     */
    queryPollVotesRaw(requestParameters: QueryPollVotesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PollVotesResponse>>;
    /**
     * Queries votes
     * Query votes
     */
    queryPollVotes(requestParameters: QueryPollVotesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PollVotesResponse>;
    /**
     * Queries polls
     * Query polls
     */
    queryPollsRaw(requestParameters: QueryPollsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QueryPollsResponse>>;
    /**
     * Queries polls
     * Query polls
     */
    queryPolls(requestParameters: QueryPollsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QueryPollsResponse>;
    /**
     * Get reactions on a message  Required permissions: - ReadChannel
     */
    queryReactionsRaw(requestParameters: QueryReactionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QueryReactionsResponse>>;
    /**
     * Get reactions on a message  Required permissions: - ReadChannel
     */
    queryReactions(requestParameters: QueryReactionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QueryReactionsResponse>;
    /**
     * Returns the list of threads for specific user  Required permissions: - ReadChannel
     * Query Threads
     */
    queryThreadsRaw(requestParameters: QueryThreadsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QueryThreadsResponse>>;
    /**
     * Returns the list of threads for specific user  Required permissions: - ReadChannel
     * Query Threads
     */
    queryThreads(requestParameters: QueryThreadsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QueryThreadsResponse>;
    /**
     * Find and filter users  Required permissions: - SearchUser
     * Query users
     */
    queryUsersRaw(requestParameters: QueryUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QueryUsersResponse>>;
    /**
     * Find and filter users  Required permissions: - SearchUser
     * Query users
     */
    queryUsers(requestParameters?: QueryUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QueryUsersResponse>;
    /**
     * Activates user who\'s been deactivated previously  Sends events: - user.reactivated
     * Reactivate user
     */
    reactivateUserRaw(requestParameters: ReactivateUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReactivateUserResponse>>;
    /**
     * Activates user who\'s been deactivated previously  Sends events: - user.reactivated
     * Reactivate user
     */
    reactivateUser(requestParameters: ReactivateUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReactivateUserResponse>;
    /**
     * Reactivate users in batches  Sends events: - user.reactivated
     * Reactivate users
     */
    reactivateUsersRaw(requestParameters: ReactivateUsersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReactivateUsersResponse>>;
    /**
     * Reactivate users in batches  Sends events: - user.reactivated
     * Reactivate users
     */
    reactivateUsers(requestParameters: ReactivateUsersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReactivateUsersResponse>;
    /**
     * Delete a vote from a poll  Sends events: - poll.vote_removed  Required permissions: - CastVote
     * Delete vote
     */
    removePollVoteRaw(requestParameters: RemovePollVoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PollVoteResponse>>;
    /**
     * Delete a vote from a poll  Sends events: - poll.vote_removed  Required permissions: - CastVote
     * Delete vote
     */
    removePollVote(requestParameters: RemovePollVoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PollVoteResponse>;
    /**
     * Restore soft deleted users
     * Restore users
     */
    restoreUsersRaw(requestParameters: RestoreUsersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Response>>;
    /**
     * Restore soft deleted users
     * Restore users
     */
    restoreUsers(requestParameters: RestoreUsersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Response>;
    /**
     * Executes message command action with given parameters  Sends events: - message.new  Required permissions: - RunMessageAction
     * Run message command action
     */
    runMessageActionRaw(requestParameters: RunMessageActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MessageResponse>>;
    /**
     * Executes message command action with given parameters  Sends events: - message.new  Required permissions: - RunMessageAction
     * Run message command action
     */
    runMessageAction(requestParameters: RunMessageActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MessageResponse>;
    /**
     * Search messages across channels  Required permissions: - ReadChannel
     * Search messages
     */
    searchRaw(requestParameters: SearchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchResponse>>;
    /**
     * Search messages across channels  Required permissions: - ReadChannel
     * Search messages
     */
    search(requestParameters?: SearchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchResponse>;
    /**
     * Sends event to the channel  Required permissions: - SendCustomEvent
     * Send event
     */
    sendEventRaw(requestParameters: SendEventOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EventResponse>>;
    /**
     * Sends event to the channel  Required permissions: - SendCustomEvent
     * Send event
     */
    sendEvent(requestParameters: SendEventOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EventResponse>;
    /**
     * Sends new message to the specified channel  Sends events: - message.new - message.updated  Required permissions: - AddLinks - CreateMessage - PinMessage - SkipChannelCooldown - SkipMessageModeration - UseFrozenChannel
     * Send new message
     */
    sendMessageRaw(requestParameters: SendMessageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SendMessageResponse>>;
    /**
     * Sends new message to the specified channel  Sends events: - message.new - message.updated  Required permissions: - AddLinks - CreateMessage - PinMessage - SkipChannelCooldown - SkipMessageModeration - UseFrozenChannel
     * Send new message
     */
    sendMessage(requestParameters: SendMessageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SendMessageResponse>;
    /**
     * Sends reaction to specified message  Sends events: - reaction.new - reaction.updated  Required permissions: - CreateReaction - UseFrozenChannel
     * Send reaction
     */
    sendReactionRaw(requestParameters: SendReactionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SendReactionResponse>>;
    /**
     * Sends reaction to specified message  Sends events: - reaction.new - reaction.updated  Required permissions: - CreateReaction - UseFrozenChannel
     * Send reaction
     */
    sendReaction(requestParameters: SendReactionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SendReactionResponse>;
    /**
     * Sends a custom event to a user  Sends events: - *
     * Send user event
     */
    sendUserCustomEventRaw(requestParameters: SendUserCustomEventOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Response>>;
    /**
     * Sends a custom event to a user  Sends events: - *
     * Send user event
     */
    sendUserCustomEvent(requestParameters: SendUserCustomEventOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Response>;
    /**
     * Shows previously hidden channel  Sends events: - channel.visible
     * Show channel
     */
    showChannelRaw(requestParameters: ShowChannelOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShowChannelResponse>>;
    /**
     * Shows previously hidden channel  Sends events: - channel.visible
     * Show channel
     */
    showChannel(requestParameters: ShowChannelOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShowChannelResponse>;
    /**
     * Translates message to a given language using automated translation software  Sends events: - message.updated  Required permissions: - ReadChannel
     * Translate message
     */
    translateMessageRaw(requestParameters: TranslateMessageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MessageResponse>>;
    /**
     * Translates message to a given language using automated translation software  Sends events: - message.updated  Required permissions: - ReadChannel
     * Translate message
     */
    translateMessage(requestParameters: TranslateMessageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MessageResponse>;
    /**
     * Truncates channel  Sends events: - channel.truncated  Required permissions: - DeleteChannel - TruncateChannel
     * Truncate channel
     */
    truncateChannelRaw(requestParameters: TruncateChannelOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TruncateChannelResponse>>;
    /**
     * Truncates channel  Sends events: - channel.truncated  Required permissions: - DeleteChannel - TruncateChannel
     * Truncate channel
     */
    truncateChannel(requestParameters: TruncateChannelOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TruncateChannelResponse>;
    /**
     * Removes previously applied ban  Sends events: - user.unbanned  Required permissions: - BanChannelMember - BanUser
     * Unban user
     */
    unbanRaw(requestParameters: UnbanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Response>>;
    /**
     * Removes previously applied ban  Sends events: - user.unbanned  Required permissions: - BanChannelMember - BanUser
     * Unban user
     */
    unban(requestParameters: UnbanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Response>;
    /**
     * Unblock users
     * Unblock user
     */
    unblockUsersRaw(requestParameters: UnblockUsersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UnblockUsersResponse>>;
    /**
     * Unblock users
     * Unblock user
     */
    unblockUsers(requestParameters: UnblockUsersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UnblockUsersResponse>;
    /**
     * Undelete a message that was previously soft-deleted  Sends events: - message.undeleted
     * Undelete message
     */
    undeleteMessageRaw(requestParameters: UndeleteMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateMessageResponse>>;
    /**
     * Undelete a message that was previously soft-deleted  Sends events: - message.undeleted
     * Undelete message
     */
    undeleteMessage(requestParameters: UndeleteMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateMessageResponse>;
    /**
     * Unmutes channel for user  Sends events: - channel.unmuted  Required permissions: - MuteChannel
     * Unmute channel
     */
    unmuteChannelRaw(requestParameters: UnmuteChannelOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UnmuteResponse>>;
    /**
     * Unmutes channel for user  Sends events: - channel.unmuted  Required permissions: - MuteChannel
     * Unmute channel
     */
    unmuteChannel(requestParameters: UnmuteChannelOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UnmuteResponse>;
    /**
     * Unmutes previously muted user  Sends events: - user.unmuted  Required permissions: - MuteUser
     * Unmute user
     */
    unmuteUserRaw(requestParameters: UnmuteUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UnmuteResponse>>;
    /**
     * Unmutes previously muted user  Sends events: - user.unmuted  Required permissions: - MuteUser
     * Unmute user
     */
    unmuteUser(requestParameters: UnmuteUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UnmuteResponse>;
    /**
     * Fetch unread counts for a single user
     * Unread counts
     */
    unreadCountsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WrappedUnreadCountsResponse>>;
    /**
     * Fetch unread counts for a single user
     * Unread counts
     */
    unreadCounts(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WrappedUnreadCountsResponse>;
    /**
     * Fetch unread counts in batch for multiple users in one call
     * Batch unread counts
     */
    unreadCountsBatchRaw(requestParameters: UnreadCountsBatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UnreadCountsBatchResponse>>;
    /**
     * Fetch unread counts in batch for multiple users in one call
     * Batch unread counts
     */
    unreadCountsBatch(requestParameters: UnreadCountsBatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UnreadCountsBatchResponse>;
    /**
     * This Method updates one or more application settings
     * Update App Settings
     */
    updateAppRaw(requestParameters: UpdateAppOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Response>>;
    /**
     * This Method updates one or more application settings
     * Update App Settings
     */
    updateApp(requestParameters: UpdateAppOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Response>;
    /**
     * Updates contents of the block list
     * Update block list
     */
    updateBlockListRaw(requestParameters: UpdateBlockListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Response>>;
    /**
     * Updates contents of the block list
     * Update block list
     */
    updateBlockList(requestParameters: UpdateBlockListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Response>;
    /**
     * Change channel data  Sends events: - channel.updated - member.added - member.removed - member.updated - message.new  Required permissions: - AddOwnChannelMembership - RemoveOwnChannelMembership - UpdateChannel - UpdateChannelCooldown - UpdateChannelFrozen - UpdateChannelMembers
     * Update channel
     */
    updateChannelRaw(requestParameters: UpdateChannelOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateChannelResponse>>;
    /**
     * Change channel data  Sends events: - channel.updated - member.added - member.removed - member.updated - message.new  Required permissions: - AddOwnChannelMembership - RemoveOwnChannelMembership - UpdateChannel - UpdateChannelCooldown - UpdateChannelFrozen - UpdateChannelMembers
     * Update channel
     */
    updateChannel(requestParameters: UpdateChannelOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateChannelResponse>;
    /**
     * Updates certain fields of the channel  Sends events: - channel.updated  Required permissions: - UpdateChannel - UpdateChannelCooldown - UpdateChannelFrozen
     * Partially update channel
     */
    updateChannelPartialRaw(requestParameters: UpdateChannelPartialOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateChannelPartialResponse>>;
    /**
     * Updates certain fields of the channel  Sends events: - channel.updated  Required permissions: - UpdateChannel - UpdateChannelCooldown - UpdateChannelFrozen
     * Partially update channel
     */
    updateChannelPartial(requestParameters: UpdateChannelPartialOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateChannelPartialResponse>;
    /**
     * Updates channel type
     * Update channel type
     */
    updateChannelTypeRaw(requestParameters: UpdateChannelTypeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateChannelTypeResponse>>;
    /**
     * Updates channel type
     * Update channel type
     */
    updateChannelType(requestParameters: UpdateChannelTypeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateChannelTypeResponse>;
    /**
     * Updates custom chat command
     * Update command
     */
    updateCommandRaw(requestParameters: UpdateCommandOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateCommandResponse>>;
    /**
     * Updates custom chat command
     * Update command
     */
    updateCommand(requestParameters: UpdateCommandOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateCommandResponse>;
    /**
     *
     * Update External Storage
     */
    updateExternalStorageRaw(requestParameters: UpdateExternalStorageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateExternalStorageResponse>>;
    /**
     *
     * Update External Storage
     */
    updateExternalStorage(requestParameters: UpdateExternalStorageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateExternalStorageResponse>;
    /**
     * Updates message with new data  Sends events: - message.updated  Required permissions: - AddLinks - PinMessage - SkipMessageModeration - UpdateMessage
     * Update message
     */
    updateMessageRaw(requestParameters: UpdateMessageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateMessageResponse>>;
    /**
     * Updates message with new data  Sends events: - message.updated  Required permissions: - AddLinks - PinMessage - SkipMessageModeration - UpdateMessage
     * Update message
     */
    updateMessage(requestParameters: UpdateMessageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateMessageResponse>;
    /**
     * Updates certain fields of the message  Sends events: - message.updated  Required permissions: - AddLinks - PinMessage - SkipMessageModeration - UpdateMessage
     * Partially message update
     */
    updateMessagePartialRaw(requestParameters: UpdateMessagePartialOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateMessagePartialResponse>>;
    /**
     * Updates certain fields of the message  Sends events: - message.updated  Required permissions: - AddLinks - PinMessage - SkipMessageModeration - UpdateMessage
     * Partially message update
     */
    updateMessagePartial(requestParameters: UpdateMessagePartialOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateMessagePartialResponse>;
    /**
     * Updates a poll  Sends events: - poll.closed - poll.updated  Required permissions: - UpdatePoll
     * Update poll
     */
    updatePollRaw(requestParameters: UpdatePollOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PollResponse>>;
    /**
     * Updates a poll  Sends events: - poll.closed - poll.updated  Required permissions: - UpdatePoll
     * Update poll
     */
    updatePoll(requestParameters: UpdatePollOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PollResponse>;
    /**
     * Updates a poll option  Sends events: - poll.updated  Required permissions: - UpdatePoll
     * Update poll option
     */
    updatePollOptionRaw(requestParameters: UpdatePollOptionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PollOptionResponse>>;
    /**
     * Updates a poll option  Sends events: - poll.updated  Required permissions: - UpdatePoll
     * Update poll option
     */
    updatePollOption(requestParameters: UpdatePollOptionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PollOptionResponse>;
    /**
     * Updates a poll partially  Sends events: - poll.updated  Required permissions: - UpdatePoll
     * Partial update poll
     */
    updatePollPartialRaw(requestParameters: UpdatePollPartialOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PollResponse>>;
    /**
     * Updates a poll partially  Sends events: - poll.updated  Required permissions: - UpdatePoll
     * Partial update poll
     */
    updatePollPartial(requestParameters: UpdatePollPartialOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PollResponse>;
    /**
     * Updates certain fields of the thread  Sends events: - thread.updated  Required permissions: - ReadChannel - UpdateThread
     * Partially update thread
     */
    updateThreadPartialRaw(requestParameters: UpdateThreadPartialOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateThreadPartialResponse>>;
    /**
     * Updates certain fields of the thread  Sends events: - thread.updated  Required permissions: - ReadChannel - UpdateThread
     * Partially update thread
     */
    updateThreadPartial(requestParameters: UpdateThreadPartialOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateThreadPartialResponse>;
    /**
     * Update or create users in bulk  Sends events: - user.updated
     * Upsert users
     */
    updateUsersRaw(requestParameters: UpdateUsersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateUsersResponse>>;
    /**
     * Update or create users in bulk  Sends events: - user.updated
     * Upsert users
     */
    updateUsers(requestParameters: UpdateUsersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateUsersResponse>;
    /**
     * Updates certain fields of the user  Sends events: - user.presence.changed - user.updated
     * Partially update user
     */
    updateUsersPartialRaw(requestParameters: UpdateUsersPartialOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateUsersResponse>>;
    /**
     * Updates certain fields of the user  Sends events: - user.presence.changed - user.updated
     * Partially update user
     */
    updateUsersPartial(requestParameters: UpdateUsersPartialOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateUsersResponse>;
    /**
     * Uploads file  Required permissions: - UploadAttachment
     * Upload file
     */
    uploadFileRaw(requestParameters: UploadFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileUploadResponse>>;
    /**
     * Uploads file  Required permissions: - UploadAttachment
     * Upload file
     */
    uploadFile(requestParameters: UploadFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileUploadResponse>;
    /**
     * Uploads image  Required permissions: - UploadAttachment
     * Upload image
     */
    uploadImageRaw(requestParameters: UploadImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ImageUploadResponse>>;
    /**
     * Uploads image  Required permissions: - UploadAttachment
     * Upload image
     */
    uploadImage(requestParameters: UploadImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ImageUploadResponse>;
    /**
     * Upsert a push provider for v2 with multi bundle/package support
     * Upsert a push provider
     */
    upsertPushProviderRaw(requestParameters: UpsertPushProviderOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpsertPushProviderResponse>>;
    /**
     * Upsert a push provider for v2 with multi bundle/package support
     * Upsert a push provider
     */
    upsertPushProvider(requestParameters: UpsertPushProviderOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpsertPushProviderResponse>;
}
/**
 * @export
 */
export declare const DeletePushProviderTypeEnum: {
    readonly APN: "apn";
    readonly FIREBASE: "firebase";
    readonly HUAWEI: "huawei";
    readonly XIAOMI: "xiaomi";
};
export type DeletePushProviderTypeEnum = typeof DeletePushProviderTypeEnum[keyof typeof DeletePushProviderTypeEnum];
